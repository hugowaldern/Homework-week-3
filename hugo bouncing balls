//int rad=20;
//float xpos, ypos;

//float xspeed = 4;
//float yspeed = 5;

//int xdirection = 1;
//int ydirection = 1;

//void setup() {
//  size (500, 500);
//  frameRate (30);
//  ellipseMode(RADIUS);
//  xpos = width/2;
//  ypos = height/2;
//  ellipseMode(RADIUS);
//  xpos = width/4;
//  ypos = height/4;
//}

//void draw() {
//  background (0);
//xpos = xpos + (xspeed*xdirection);
//ypos = ypos + (yspeed*ydirection);

//if (xpos> width-rad ||xpos < rad) {
//  xdirection *= -1;
//}
//if (ypos> height-rad ||ypos < rad) {
//  ydirection *= -1;
//}
//fill(255,0,0);
//ellipse(xpos,ypos,rad,rad);

//fill(0,255,0);
//ellipse(xpos,ypos,rad,rad);
//}

Ball[] balls =  { 
  new Ball(0, 0, 75), 
  new Ball(700, 400, 80) 
};

void setup() {
  size(700, 700);
}

void draw() {
  background(248, 139, 239);

  for (Ball b : balls) {
    b.update();
    b.display();
    b.checkBoundaryCollision();
  }
  
  balls[0].checkCollision(balls[1]);
}


//start by making 2 ellipses in void set up and void draw. 
//set fills to green/red.
//look up motion examples. 
//change location of 2 ellipses to void setup, set to center using ellipsemode. 
//make 2 ellipses have separate xpos and ypos.. i suspects thay my follow
//each other around. 
//i was correct, the balls bouncein sync with each other... i will have
//to figure out how to separate them at random variables. 
//found examples of necessary code. 
///I am annoyed, I have to write an entirely new code based on the new function
//Ball function includes new function... [] what do these do..
//this is the only function i have seen with a semi colin after the bracket.. reminder to
//look this up
//this code is rediculous, i will attempt to understand this. 





//class Ball {    //specifying a new class(such as Void)
//  PVector position;
//  PVector velocity;

//  float r, m; //variables

//  Ball (float x, float y, float r_) {
//    position = new PVector(x, y);
//    velocity = Pvector.random2D(); //I think this is setting speed in corrilation to 
//    //the ballsmovements
//    velocity.mult(3);
//    r=r_;
//    m=r*.1;
//  }

//  void update() {
//    poisition.add(velocity);
//  }

//  void CheckBoundaryCollision() {
//    if (position.x > width-r) {
//      ;
//      velocity.x *= -1;
//    } else if (position.x< r) {
//      position.x = r;
//      velocity.y *= -1;
//    } else if (position.y >height-r) {
//      position.y = height-r;
//      velocity.y *= -1;
//    } else if (position.y = r) {
//    }
//  }

//  void checkCollision (Ball other) {
//    PVector bVect = Pvector.sub(other.position, posiotion);

//    float bVectMag = bVect.mag();

//    if (bVectMag < r + other.r) {
//      float theta = bVect.heading();
//      float sine = sin(theta);
//      float cosine = cos(theta);
//    }
//    PVector[] bTemp = {
//      new PVector(), new PVector()
//    };

//    bTemp[1].x = cosine * bVect.x + sine * bVect.y;
//    bTemp[1].y = cosine * bVect.y - sine * bVect.x;

//    PVector[] vTemp = {
//      new PVector(), new PVector()
//    };

//    vTemp[0].x = cosine * velocity.x +sine * elocity.y;
//    vTemp[0].y = cosine * velocity.y - sine * velocity.x;
//    vTemp[1].x = cosine * velocity.x + sine * other.velocity.y;
//    vTemp[1].y = cosine * other .velocity.y - sine * other.velocity.x;

//    PVector[] vFinal = {
//      new PVector(), new PVector()
//    };

//    vFinal[0].x = ((m - other.m) * vTemp[0].x + 2 * other.m * vTemp[1].x) / (m + other.m);
//    vFinal[0].y = vTemp[0].y;

//    vFinal[1].x = ((other.m - m) * vTemp[1].x + 2 * m * vTemp[0].x) / (m + other.m);
//    vFinal[1].y = vTemp[1].y;

//    bTemp[0].x += vFinal[0].x;
//    bTemp[1].x += vFinal[1].x;

//    PVector[] bFinal = {
//      new PVector(), newPVector()
//    };

//    bFinal[0].x = cosine * bTemp[0].x - sine * bTemp[0].y;
//    bFinal[0].y = cosine * bTemp[0].y - sine * bTemp[0].x;
//    bFinal[0].x = cosine * bTemp[1].x - sine * bTemp[1].y;
//    bFinal[0].y = cosine * bTemp[1].y - sine * bTemp[1].x;

//    other.position.x = position.x +bFinal[1].x;
//    other.position.y = position.y +bFinal[1].y;

//    position.add(bFinal[0]);

//    velocity.x = cosine * vFinal[0].x - sine * vFinal[0].y;
//    velocity.y = cosine * vFinal[0].y + sine * vFinal[0].x;

//    other.velocity.x = cosine * vFinal[1].x - sine * vFinal[1].y;
//    other.velocity.y = cosine * vFinal[1].y + sine * vFinal[1].x;
//  }
//}

// //void display() {
// // noStroke();
// // fill(0);
// // ellipse(position.x, position.y, r*2, r*2);
// // }
////}//

class Ball {
  PVector position;
  PVector velocity;

  float r, m;

  Ball(float x, float y, float r_) {
    position = new PVector(x, y);
    velocity = PVector.random2D();
    velocity.mult(3);
    r = r_;
    m = r*.1;
  }

  void update() {
    position.add(velocity);
  }

  void checkBoundaryCollision() {
    if (position.x > width-r) {
      position.x = width-r;
      velocity.x *= -1;
    } else if (position.x < r) {
      position.x = r;
      velocity.x *= -1;
    } else if (position.y > height-r) {
      position.y = height-r;
      velocity.y *= -1;
    } else if (position.y < r) {
      position.y = r;
      velocity.y *= -1;
    }
  }

  void checkCollision(Ball other) {

    PVector bVect = PVector.sub(other.position, position);

    float bVectMag = bVect.mag();
    if (bVectMag < r + other.r) {

      float theta  = bVect.heading();
      float sine = sin(theta);
      float cosine = cos(theta);

      PVector[] bTemp = {
        new PVector(), new PVector()
      };

      bTemp[1].x  = cosine * bVect.x + sine * bVect.y;
      bTemp[1].y  = cosine * bVect.y - sine * bVect.x;

      PVector[] vTemp = {
        new PVector(), new PVector()
      };

      vTemp[0].x  = cosine * velocity.x + sine * velocity.y;
      vTemp[0].y  = cosine * velocity.y - sine * velocity.x;
      vTemp[1].x  = cosine * other.velocity.x + sine * other.velocity.y;
      vTemp[1].y  = cosine * other.velocity.y - sine * other.velocity.x;

      PVector[] vFinal = {  
        new PVector(), new PVector()
      };

      vFinal[0].x = ((m - other.m) * vTemp[0].x + 2 * other.m * vTemp[1].x) / (m + other.m);
      vFinal[0].y = vTemp[0].y;

      vFinal[1].x = ((other.m - m) * vTemp[1].x + 2 * m * vTemp[0].x) / (m + other.m);
      vFinal[1].y = vTemp[1].y;


      bTemp[0].x += vFinal[0].x;
      bTemp[1].x += vFinal[1].x;


      PVector[] bFinal = { 
        new PVector(), new PVector()
      };

      bFinal[0].x = cosine * bTemp[0].x - sine * bTemp[0].y;
      bFinal[0].y = cosine * bTemp[0].y + sine * bTemp[0].x;
      bFinal[1].x = cosine * bTemp[1].x - sine * bTemp[1].y;
      bFinal[1].y = cosine * bTemp[1].y + sine * bTemp[1].x;

      other.position.x = position.x + bFinal[1].x;
      other.position.y = position.y + bFinal[1].y;

      position.add(bFinal[0]);

      velocity.x = cosine * vFinal[0].x - sine * vFinal[0].y;
      velocity.y = cosine * vFinal[0].y + sine * vFinal[0].x;
      other.velocity.x = cosine * vFinal[1].x - sine * vFinal[1].y;
      other.velocity.y = cosine * vFinal[1].y + sine * vFinal[1].x;
    }
  }

  void display() {
    noStroke();
    colorMode(RGB,255,255,255,100);
    fill (0, 222, 255, 100);
    ellipse(position.x, position.y, r*2, r*2);
    fill(181, 247, 183, 90);
    ellipse(position.y, position.x, r*2, r*2);
  }
}
